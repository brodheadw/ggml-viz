name: CI

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build_type: [Release, Debug]
        include:
          - os: ubuntu-latest
            platform: linux
            cc: gcc
            cxx: g++
          - os: macos-latest
            platform: macos
            cc: clang
            cxx: clang++
          - os: windows-latest
            platform: windows
    
    env:
      BUILD_TYPE: ${{ matrix.build_type }}
      PLATFORM: ${{ matrix.platform }}
      CC: ${{ matrix.os != 'windows-latest' && matrix.cc || '' }}
      CXX: ${{ matrix.os != 'windows-latest' && matrix.cxx || '' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          libgl1-mesa-dev \
          libxinerama-dev \
          libxcursor-dev \
          libxi-dev \
          libxrandr-dev \
          bc
          
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake bc
        
    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        # Windows dependencies will be handled by FetchContent in CMake
        echo "Windows dependencies managed by CMake FetchContent"
        
    - name: Create build directory
      shell: bash
      run: mkdir -p build
        
    - name: Configure CMake
      working-directory: build
      shell: bash
      run: |
        if [ "${{ matrix.platform }}" = "macos" ]; then
          cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DGGML_METAL=OFF
        elif [ "${{ matrix.platform }}" = "windows" ]; then
          cmake .. -A x64 -DCMAKE_BUILD_TYPE=$BUILD_TYPE
        else
          cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE
        fi
        
    - name: Build project
      working-directory: build
      shell: bash
      run: |
        if [ "${{ matrix.platform }}" = "linux" ]; then
          make -j$(nproc)
        elif [ "${{ matrix.platform }}" = "windows" ]; then
          cmake --build . --config $BUILD_TYPE --parallel
        else
          make -j$(sysctl -n hw.ncpu)
        fi
        
    - name: Run basic tests
      working-directory: build
      shell: bash
      run: |
        # Run the basic hook test
        if [ "${{ matrix.platform }}" = "windows" ]; then
          ./bin/$BUILD_TYPE/test_ggml_hook.exe
        else
          ./bin/test_ggml_hook
        fi
        
        # Verify trace file was created
        if [ ! -f "test_trace.ggmlviz" ]; then
          echo "Error: Trace file not created"
          exit 1
        fi
        
        # Test trace reading
        if [ "${{ matrix.platform }}" = "windows" ]; then
          ./bin/$BUILD_TYPE/test_trace_reader.exe test_trace.ggmlviz
        else
          ./bin/test_trace_reader test_trace.ggmlviz
        fi
        
    - name: Test interposition system
      working-directory: build
      shell: bash
      run: |
        # Test the interposition system
        # The test hardcodes the output filename, so we check for that
        EXPECTED_TRACE_FILE="test_trace.ggmlviz"
        
        if [ "${{ matrix.platform }}" = "macos" ]; then
          export DYLD_INSERT_LIBRARIES="$PWD/src/libggml_viz_hook.dylib"
          ./bin/test_ggml_hook
        elif [ "${{ matrix.platform }}" = "windows" ]; then
          # Windows uses DLL injection - test the DLL loading
          echo "Testing Windows DLL loading..."
          export PATH="$PWD/bin/$BUILD_TYPE:$PATH"
          ./bin/$BUILD_TYPE/test_ggml_hook.exe
        else
          export LD_PRELOAD="$PWD/src/libggml_viz_hook.so"
          ./bin/test_ggml_hook
        fi
        
        # Verify trace file was created (test hardcodes filename)
        if [ ! -f "$EXPECTED_TRACE_FILE" ]; then
          echo "Error: Interposition trace file not created"
          echo "Expected: $EXPECTED_TRACE_FILE"
          echo "Files in directory:"
          ls -la *.ggmlviz 2>/dev/null || echo "No .ggmlviz files found"
          exit 1
        fi
        
        # Test reading the interposition trace
        unset DYLD_INSERT_LIBRARIES
        unset LD_PRELOAD
        if [ "${{ matrix.platform }}" = "windows" ]; then
          ./bin/$BUILD_TYPE/test_trace_reader.exe "$EXPECTED_TRACE_FILE"
        else
          ./bin/test_trace_reader "$EXPECTED_TRACE_FILE"
        fi
        
    - name: Run performance benchmark
      working-directory: build/..
      shell: bash
      run: |
        # Run simple benchmark (skip on Windows for now)
        if [ "${{ matrix.platform }}" != "windows" ]; then
          ./scripts/simple_benchmark.sh
        else
          echo "Windows benchmark implementation TODO"
        fi
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: build-artifacts-${{ matrix.platform }}-${{ matrix.build_type }}
        path: |
          build/bin/
          build/${{ matrix.build_type }}/
          build/src/libggml_viz_hook.*
          *.ggmlviz
        retention-days: 7
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.platform }}-${{ matrix.build_type }}
        path: |
          test_*.ggmlviz
          ci_test.ggmlviz
          benchmark_results/
        retention-days: 7

  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Install clang-tidy and cppcheck
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-tidy cppcheck
        
    - name: Run lint checks
      run: |
        ./scripts/lint.sh
        
    - name: Check code formatting
      run: |
        # This will be implemented when format.sh is complete
        echo "Format check placeholder - implement when format.sh is ready"

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate documentation
      run: |
        # Check that all markdown files are valid
        find . -name "*.md" -type f | while read file; do
          echo "Checking $file..."
          # Basic markdown validation - could be enhanced
          if [ ! -s "$file" ]; then
            echo "Error: Empty documentation file: $file"
            exit 1
          fi
        done
        
    - name: Check for broken links
      run: |
        # Placeholder for link checking
        echo "Link checking placeholder - could add markdown-link-check"
        
    - name: Verify examples and guides
      run: |
        # Verify key documentation files exist
        root_docs=("README.md" "USER_GUIDE.md")
        docs_dir_files=("CONTRIBUTING.md" "CHANGELOG.md")
        
        # Check root directory files
        for doc in "${root_docs[@]}"; do
          if [ ! -f "$doc" ]; then
            echo "Error: Required documentation file missing in root: $doc"
            exit 1
          fi
        done
        
        # Check docs directory files  
        for doc in "${docs_dir_files[@]}"; do
          if [ ! -f "docs/$doc" ]; then
            echo "Error: Required documentation file missing in docs/: $doc"
            exit 1
          fi
        done